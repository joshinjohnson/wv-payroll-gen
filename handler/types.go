// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package handler

import (
	"encoding/json"
	"encoding/xml"
	"net/http"

	openapi_types "github.com/discord-gophers/goapi-gen/types"
	"github.com/go-chi/render"
)

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// Ok defines model for Ok.
type Ok struct {
	Message string `json:"message"`
}

// PayrollReport defines model for PayrollReport.
type PayrollReport struct {
	EmployeeReports []WorkerPayrollBiWeek `json:"employee_reports"`
}

// WorkerPayrollBiWeek defines model for WorkerPayrollBiWeek.
type WorkerPayrollBiWeek struct {
	AmountPaid string `json:"amount_paid"`
	EmployeeID uint64 `json:"employee_id"`
	PayPeriod  struct {
		EndDate   *openapi_types.Date `json:"end_date,omitempty"`
		StartDate *openapi_types.Date `json:"start_date,omitempty"`
	} `json:"pay_period"`
}

// InvalidCSV defines model for InvalidCSV.
type InvalidCSV Error

// ServerError defines model for ServerError.
type ServerError Error

// Success defines model for Success.
type Success Ok

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// GetReportJSON200Response is a constructor method for a GetReport response.
// A *Response is returned with the configured status code and content type from the spec.
func GetReportJSON200Response(body PayrollReport) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetReportJSON500Response is a constructor method for a GetReport response.
// A *Response is returned with the configured status code and content type from the spec.
func GetReportJSON500Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// PostUploadJSON200Response is a constructor method for a PostUpload response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUploadJSON200Response(body Ok) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PostUploadJSON400Response is a constructor method for a PostUpload response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUploadJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// PostUploadJSON500Response is a constructor method for a PostUpload response.
// A *Response is returned with the configured status code and content type from the spec.
func PostUploadJSON500Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}
